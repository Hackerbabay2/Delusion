//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/KeybindService/Keybinds.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Keybinds: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Keybinds()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Keybinds"",
    ""maps"": [
        {
            ""name"": ""Interface"",
            ""id"": ""4f89f42d-9329-4eff-a1ac-60676e206463"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""81cdec6a-a55e-44c1-b8c9-3d4e5c557a44"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""b40a1480-6cf3-4f31-a362-da1bcc718b41"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""39759062-4f35-4e59-925c-978b7e3f1db2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""a7ed0925-9def-43b2-a6cc-6e35f7f6e10e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0cac4431-9ce5-4ad7-9046-390cba2f9f0b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fe3131a-976f-428c-bb5f-9bc1499dcd9d"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4cc10693-4f26-4335-909a-e2edc422a4c1"",
                    ""path"": ""<Keyboard>/f9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87548cc5-c9ff-4026-b099-13094e49ad46"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterMovement"",
            ""id"": ""cadd5040-63b9-4f4a-b868-848eba2ef7b8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a0efce7-7d91-4bf6-ad9a-2b3cedea4b97"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstPerson"",
                    ""type"": ""Button"",
                    ""id"": ""74e15de5-896c-41ef-bab5-5b64c6bda77c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondPerson"",
                    ""type"": ""Button"",
                    ""id"": ""b920d967-5f05-462b-924b-3c186d0aed4e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThridPerson"",
                    ""type"": ""Button"",
                    ""id"": ""03ce4b38-d707-46d8-ab33-5b18f82c9d4c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interactive"",
                    ""type"": ""Button"",
                    ""id"": ""0dea92d2-7947-460c-9eca-bfd0bc853b5b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""11f6fd5a-7ea3-49af-94ab-e39141592e22"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f959ae88-93bd-427a-992d-7619b6cd168f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d8ad0523-4c76-4d56-b813-1e234599148c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2a51c3f5-8b8e-4c86-839b-fb23970c73c9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""baad8385-89a4-4c88-8451-8be3e38b0c6f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fb99cb68-4d57-4096-8f4e-fe28e2786786"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""40d35e4b-7486-4b0e-978c-d9ed26251bd9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2dcfdd8b-9d45-41de-a44b-8d9c3663dfed"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a47d2ad1-3670-4b99-99dd-d68550b8c3d8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1831cfe2-1330-40fa-9fe7-4001ea2bd546"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""43cdbc95-30f3-4667-8a99-bc3b44ebb30e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""718c32c6-2dc4-4f2a-be8a-ac3cc12b9411"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58db59d2-4d2e-4e6c-b432-8043a2cfc955"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThridPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1348be3-af74-4450-9d23-de287f09e767"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Interactive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Interface
        m_Interface = asset.FindActionMap("Interface", throwIfNotFound: true);
        m_Interface_Menu = m_Interface.FindAction("Menu", throwIfNotFound: true);
        m_Interface_Save = m_Interface.FindAction("Save", throwIfNotFound: true);
        m_Interface_Load = m_Interface.FindAction("Load", throwIfNotFound: true);
        m_Interface_Flashlight = m_Interface.FindAction("Flashlight", throwIfNotFound: true);
        // CharacterMovement
        m_CharacterMovement = asset.FindActionMap("CharacterMovement", throwIfNotFound: true);
        m_CharacterMovement_Movement = m_CharacterMovement.FindAction("Movement", throwIfNotFound: true);
        m_CharacterMovement_FirstPerson = m_CharacterMovement.FindAction("FirstPerson", throwIfNotFound: true);
        m_CharacterMovement_SecondPerson = m_CharacterMovement.FindAction("SecondPerson", throwIfNotFound: true);
        m_CharacterMovement_ThridPerson = m_CharacterMovement.FindAction("ThridPerson", throwIfNotFound: true);
        m_CharacterMovement_Interactive = m_CharacterMovement.FindAction("Interactive", throwIfNotFound: true);
    }

    ~@Keybinds()
    {
        UnityEngine.Debug.Assert(!m_Interface.enabled, "This will cause a leak and performance issues, Keybinds.Interface.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CharacterMovement.enabled, "This will cause a leak and performance issues, Keybinds.CharacterMovement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interface
    private readonly InputActionMap m_Interface;
    private List<IInterfaceActions> m_InterfaceActionsCallbackInterfaces = new List<IInterfaceActions>();
    private readonly InputAction m_Interface_Menu;
    private readonly InputAction m_Interface_Save;
    private readonly InputAction m_Interface_Load;
    private readonly InputAction m_Interface_Flashlight;
    public struct InterfaceActions
    {
        private @Keybinds m_Wrapper;
        public InterfaceActions(@Keybinds wrapper) { m_Wrapper = wrapper; }
        public InputAction @Menu => m_Wrapper.m_Interface_Menu;
        public InputAction @Save => m_Wrapper.m_Interface_Save;
        public InputAction @Load => m_Wrapper.m_Interface_Load;
        public InputAction @Flashlight => m_Wrapper.m_Interface_Flashlight;
        public InputActionMap Get() { return m_Wrapper.m_Interface; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InterfaceActions set) { return set.Get(); }
        public void AddCallbacks(IInterfaceActions instance)
        {
            if (instance == null || m_Wrapper.m_InterfaceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InterfaceActionsCallbackInterfaces.Add(instance);
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
            @Flashlight.started += instance.OnFlashlight;
            @Flashlight.performed += instance.OnFlashlight;
            @Flashlight.canceled += instance.OnFlashlight;
        }

        private void UnregisterCallbacks(IInterfaceActions instance)
        {
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
            @Flashlight.started -= instance.OnFlashlight;
            @Flashlight.performed -= instance.OnFlashlight;
            @Flashlight.canceled -= instance.OnFlashlight;
        }

        public void RemoveCallbacks(IInterfaceActions instance)
        {
            if (m_Wrapper.m_InterfaceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInterfaceActions instance)
        {
            foreach (var item in m_Wrapper.m_InterfaceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InterfaceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InterfaceActions @Interface => new InterfaceActions(this);

    // CharacterMovement
    private readonly InputActionMap m_CharacterMovement;
    private List<ICharacterMovementActions> m_CharacterMovementActionsCallbackInterfaces = new List<ICharacterMovementActions>();
    private readonly InputAction m_CharacterMovement_Movement;
    private readonly InputAction m_CharacterMovement_FirstPerson;
    private readonly InputAction m_CharacterMovement_SecondPerson;
    private readonly InputAction m_CharacterMovement_ThridPerson;
    private readonly InputAction m_CharacterMovement_Interactive;
    public struct CharacterMovementActions
    {
        private @Keybinds m_Wrapper;
        public CharacterMovementActions(@Keybinds wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterMovement_Movement;
        public InputAction @FirstPerson => m_Wrapper.m_CharacterMovement_FirstPerson;
        public InputAction @SecondPerson => m_Wrapper.m_CharacterMovement_SecondPerson;
        public InputAction @ThridPerson => m_Wrapper.m_CharacterMovement_ThridPerson;
        public InputAction @Interactive => m_Wrapper.m_CharacterMovement_Interactive;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @FirstPerson.started += instance.OnFirstPerson;
            @FirstPerson.performed += instance.OnFirstPerson;
            @FirstPerson.canceled += instance.OnFirstPerson;
            @SecondPerson.started += instance.OnSecondPerson;
            @SecondPerson.performed += instance.OnSecondPerson;
            @SecondPerson.canceled += instance.OnSecondPerson;
            @ThridPerson.started += instance.OnThridPerson;
            @ThridPerson.performed += instance.OnThridPerson;
            @ThridPerson.canceled += instance.OnThridPerson;
            @Interactive.started += instance.OnInteractive;
            @Interactive.performed += instance.OnInteractive;
            @Interactive.canceled += instance.OnInteractive;
        }

        private void UnregisterCallbacks(ICharacterMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @FirstPerson.started -= instance.OnFirstPerson;
            @FirstPerson.performed -= instance.OnFirstPerson;
            @FirstPerson.canceled -= instance.OnFirstPerson;
            @SecondPerson.started -= instance.OnSecondPerson;
            @SecondPerson.performed -= instance.OnSecondPerson;
            @SecondPerson.canceled -= instance.OnSecondPerson;
            @ThridPerson.started -= instance.OnThridPerson;
            @ThridPerson.performed -= instance.OnThridPerson;
            @ThridPerson.canceled -= instance.OnThridPerson;
            @Interactive.started -= instance.OnInteractive;
            @Interactive.performed -= instance.OnInteractive;
            @Interactive.canceled -= instance.OnInteractive;
        }

        public void RemoveCallbacks(ICharacterMovementActions instance)
        {
            if (m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterMovementActions @CharacterMovement => new CharacterMovementActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IInterfaceActions
    {
        void OnMenu(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
        void OnFlashlight(InputAction.CallbackContext context);
    }
    public interface ICharacterMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnFirstPerson(InputAction.CallbackContext context);
        void OnSecondPerson(InputAction.CallbackContext context);
        void OnThridPerson(InputAction.CallbackContext context);
        void OnInteractive(InputAction.CallbackContext context);
    }
}
